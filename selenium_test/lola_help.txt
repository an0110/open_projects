Help on Firefox in module seleniumwire.webdriver object:

class Firefox(seleniumwire.inspect.InspectRequestsMixin, DriverCommonMixin, selenium.webdriver.firefox.webdriver.WebDriver)
 |  Firefox(*args, seleniumwire_options=None, **kwargs)
 |  
 |  Extends the Firefox webdriver to provide additional methods for inspecting requests.
 |  
 |  Method resolution order:
 |      Firefox
 |      seleniumwire.inspect.InspectRequestsMixin
 |      DriverCommonMixin
 |      selenium.webdriver.firefox.webdriver.WebDriver
 |      selenium.webdriver.remote.webdriver.WebDriver
 |      selenium.webdriver.remote.webdriver.BaseWebDriver
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, *args, seleniumwire_options=None, **kwargs)
 |      Initialise a new Firefox WebDriver instance.
 |      
 |      Args:
 |          seleniumwire_options: The seleniumwire options dictionary.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __abstractmethods__ = frozenset()
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from seleniumwire.inspect.InspectRequestsMixin:
 |  
 |  iter_requests(self) -> Iterator[seleniumwire.request.Request]
 |      Return an iterator of requests.
 |      
 |      Returns: An iterator.
 |  
 |  wait_for_request(self, pat: str, timeout: Union[int, float] = 10) -> seleniumwire.request.Request
 |      Wait up to the timeout period for a request matching the specified
 |      pattern to be seen.
 |      
 |      The pat attribute can be can be a simple substring or a regex that will
 |      be searched in the full request URL. If a request is not seen before the
 |      timeout then a TimeoutException is raised. Only requests with corresponding
 |      responses are considered.
 |      
 |      Given that pat can be a regex, ensure that any special characters
 |      (e.g. question marks) are escaped.
 |      
 |      Args:
 |          pat: The pat of the request to look for. A regex can be supplied.
 |          timeout: The maximum time to wait in seconds. Default 10s.
 |      
 |      Returns:
 |          The request.
 |      Raises:
 |          TimeoutException if a request is not seen within the timeout
 |              period.
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from seleniumwire.inspect.InspectRequestsMixin:
 |  
 |  har
 |      Get a HAR archive of HTTP transactions that have taken place.
 |      
 |      Note that the enable_har option needs to be set before HAR
 |      data will be captured.
 |      
 |      Returns: A JSON string of HAR data.
 |  
 |  last_request
 |      Retrieve the last request made between the browser and server.
 |      
 |      Note that this is more efficient than running requests[-1]
 |      
 |      Returns:
 |          A Request instance representing the last request made, or
 |          None if no requests have been made.
 |  
 |  requests
 |      Retrieves the requests made between the browser and server.
 |      
 |      Captured requests can be cleared with 'del', e.g:
 |      
 |          del firefox.requests
 |      
 |      Returns:
 |          A list of Request instances representing the requests made
 |          between the browser and server.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from seleniumwire.inspect.InspectRequestsMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  body_overrides
 |      The body overrides for outgoing browser requests.
 |      
 |      DEPRECATED. Use request_interceptor and response_interceptor.
 |      
 |      For 'not GET' requests, the parameters are assumed to be encoded in the
 |      request body.
 |      
 |      The value of the body can be a string value or list of sublists,
 |      with each sublist having two elements - a URL pattern and string value.
 |      The string value will be encoded, then replace whole http body.
 |      And body_overrides has higher priority than param_overrides When they conflict.
 |      For example:
 |          body_overrides = '{"foo":"bar"}'
 |          body_overrides = [
 |              ('.*somewhere.com.*', '{"foo":"bar"}'),
 |              ('*.somewhere-else.com.*', '{"x":"y"}'),
 |          ]
 |  
 |  header_overrides
 |      The header overrides for outgoing browser requests.
 |      
 |      DEPRECATED. Use request_interceptor and response_interceptor.
 |      
 |      The value of the headers can be a dictionary or list of sublists,
 |      with each sublist having two elements - a URL pattern and headers.
 |      Where a header in the dictionary exists in the request, the dictionary
 |      value will overwrite the one in the request. Where a header in the dictionary
 |      does not exist in the request, it will be added to the request as a
 |      new header. To filter out a header from the request, set that header
 |      in the dictionary to None. Header names are case insensitive.
 |      For response headers, prefix the header name with 'response:'.
 |      
 |      For example:
 |      
 |          header_overrides = {
 |              'User-Agent': 'Firefox',
 |              'response:Cache-Control': 'none'
 |          }
 |          header_overrides = [
 |              ('.*somewhere.com.*', {'User-Agent': 'Firefox', 'response:Cache-Control': 'none'}),
 |              ('*.somewhere-else.com.*', {'User-Agent': 'Chrome'})
 |          ]
 |  
 |  param_overrides
 |      The parameter overrides for outgoing browser requests.
 |      
 |      DEPRECATED. Use request_interceptor.
 |      
 |      For POST requests, the parameters are assumed to be encoded in the
 |      request body.
 |      
 |      The value of the params can be a dictionary or list of sublists,
 |      with each sublist having two elements - a URL pattern and params.
 |      Where a param in the dictionary exists in the request, the dictionary
 |      value will overwrite the one in the request. Where a param in the dictionary
 |      does not exist in the request, it will be added to the request as a
 |      new param. To filter out a param from the request, set that param
 |      in the dictionary to None.
 |      
 |      For example:
 |          param_overrides = {'foo': 'bar'}
 |          param_overrides = [
 |              ('.*somewhere.com.*', {'foo': 'bar'}),
 |              ('*.somewhere-else.com.*', {'x': 'y'}),
 |          ]
 |  
 |  querystring_overrides
 |      The querystring overrides for outgoing browser requests.
 |      
 |      DEPRECATED. Use request_interceptor.
 |      
 |      The value of the querystring override can be a string or a list of sublists,
 |      with each sublist having two elements, a URL pattern and the querystring.
 |      The querystring override will overwrite the querystring in the request
 |      or will be added to the request if the request has no querystring. To
 |      remove a querystring from the request, set the value to empty string.
 |      
 |      For example:
 |          querystring_overrides = 'foo=bar&x=y'
 |          querystring_overrides = [
 |              ('.*somewhere.com.*', 'foo=bar&x=y'),
 |              ('*.somewhere-else.com.*', 'a=b&c=d'),
 |          ]
 |  
 |  request_interceptor
 |      A callable that will be used to intercept/modify requests.
 |      
 |      The callable must accept a single argument for the request
 |      being intercepted.
 |  
 |  response_interceptor
 |      A callable that will be used to intercept/modify responses.
 |      
 |      The callable must accept two arguments: the response being
 |      intercepted and the originating request.
 |  
 |  rewrite_rules
 |      The rules used to rewrite request URLs.
 |      
 |      DEPRECATED. Use request_interceptor.
 |      
 |      The value of the rewrite rules should be a list of sublists (or tuples)
 |      with each sublist containing the pattern and replacement.
 |      
 |      For example:
 |          rewrite_rules = [
 |              (r'(https?://)www.google.com/', r'www.bing.com/'),
 |              (r'https://docs.python.org/2/', r'https://docs.python.org/3/'),
 |          ]
 |  
 |  scopes
 |      The URL patterns used to scope request capture.
 |      
 |      The value of the scopes should be a list (or tuple) of
 |      regular expressions.
 |      
 |      For example:
 |          scopes = [
 |              '.*stackoverflow.*',
 |              '.*github.*'
 |          ]
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from DriverCommonMixin:
 |  
 |  quit(self)
 |      Shutdown Selenium Wire and then quit the webdriver.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from DriverCommonMixin:
 |  
 |  proxy
 |      Get the proxy configuration for the driver.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.firefox.webdriver.WebDriver:
 |  
 |  context(self, context)
 |      Sets the context that Selenium commands are running in using
 |      a `with` statement. The state of the context on the server is
 |      saved before entering the block, and restored upon exiting it.
 |      
 |      :param context: Context, may be one of the class properties
 |          `CONTEXT_CHROME` or `CONTEXT_CONTENT`.
 |      
 |      Usage example::
 |      
 |          with selenium.context(selenium.CONTEXT_CHROME):
 |              # chrome scope
 |              ... do stuff ...
 |  
 |  get_full_page_screenshot_as_base64(self) -> str
 |      Gets the full document screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_full_page_screenshot_as_base64()
 |  
 |  get_full_page_screenshot_as_file(self, filename) -> bool
 |      Saves a full document screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_full_page_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_full_page_screenshot_as_png(self) -> str
 |      Gets the full document screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_full_page_screenshot_as_png()
 |  
 |  install_addon(self, path, temporary=None) -> str
 |      Installs Firefox addon.
 |      
 |      Returns identifier of installed addon. This identifier can later
 |      be used to uninstall addon.
 |      
 |      :param path: Absolute path to the addon that will be installed.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.install_addon('/path/to/firebug.xpi')
 |  
 |  save_full_page_screenshot(self, filename) -> bool
 |      Saves a full document screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.save_full_page_screenshot('/Screenshots/foo.png')
 |  
 |  set_context(self, context) -> NoReturn
 |  
 |  uninstall_addon(self, identifier) -> NoReturn
 |      Uninstalls Firefox addon using its identifier.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.uninstall_addon('addon@foo.com')
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from selenium.webdriver.firefox.webdriver.WebDriver:
 |  
 |  firefox_profile
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from selenium.webdriver.firefox.webdriver.WebDriver:
 |  
 |  CONTEXT_CHROME = 'chrome'
 |  
 |  CONTEXT_CONTENT = 'content'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, *args)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  add_cookie(self, cookie_dict) -> None
 |      Adds a cookie to your current session.
 |      
 |      :Args:
 |       - cookie_dict: A dictionary object, with required keys - "name" and "value";
 |          optional keys - "path", "domain", "secure", "expiry", "sameSite"
 |      
 |      Usage:
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/'})
 |          driver.add_cookie({'name' : 'foo', 'value' : 'bar', 'path' : '/', 'secure':True})
 |          driver.add_cookie({'name': 'foo', 'value': 'bar', 'sameSite': 'Strict'})
 |  
 |  back(self) -> None
 |      Goes one step backward in the browser history.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.back()
 |  
 |  bidi_connection(self)
 |  
 |  close(self) -> None
 |      Closes the current window.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.close()
 |  
 |  create_web_element(self, element_id: str) -> selenium.webdriver.remote.webelement.WebElement
 |      Creates a web element with the specified `element_id`.
 |  
 |  delete_all_cookies(self) -> None
 |      Delete all cookies in the scope of the session.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.delete_all_cookies()
 |  
 |  delete_cookie(self, name) -> None
 |      Deletes a single cookie with the given name.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.delete_cookie('my_cookie')
 |  
 |  execute(self, driver_command: str, params: dict = None) -> dict
 |      Sends a command to be executed by a command.CommandExecutor.
 |      
 |      :Args:
 |       - driver_command: The name of the command to execute as a string.
 |       - params: A dictionary of named parameters to send with the command.
 |      
 |      :Returns:
 |        The command's JSON response loaded into a dictionary object.
 |  
 |  execute_async_script(self, script: str, *args)
 |      Asynchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          ::
 |      
 |              script = "var callback = arguments[arguments.length - 1]; " \
 |                       "window.setTimeout(function(){ callback('timeout') }, 3000);"
 |              driver.execute_async_script(script)
 |  
 |  execute_script(self, script, *args)
 |      Synchronously Executes JavaScript in the current window/frame.
 |      
 |      :Args:
 |       - script: The JavaScript to execute.
 |       - \*args: Any applicable arguments for your JavaScript.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.execute_script('return document.title;')
 |  
 |  file_detector_context(self, file_detector_class, *args, **kwargs)
 |      Overrides the current file detector (if necessary) in limited context.
 |      Ensures the original file detector is set afterwards.
 |      
 |      Example:
 |      
 |      with webdriver.file_detector_context(UselessFileDetector):
 |          someinput.send_keys('/etc/hosts')
 |      
 |      :Args:
 |       - file_detector_class - Class of the desired file detector. If the class is different
 |           from the current file_detector, then the class is instantiated with args and kwargs
 |           and used as a file detector during the duration of the context manager.
 |       - args - Optional arguments that get passed to the file detector class during
 |           instantiation.
 |       - kwargs - Keyword arguments, passed the same way as args.
 |  
 |  find_element(self, by='id', value=None) -> selenium.webdriver.remote.webelement.WebElement
 |      Find an element given a By strategy and locator.
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.find_element(By.ID, 'foo')
 |      
 |      :rtype: WebElement
 |  
 |  find_element_by_class_name(self, name) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds an element by class name.
 |      
 |      :Args:
 |       - name: The class name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.find_element_by_class_name('foo')
 |  
 |  find_element_by_css_selector(self, css_selector) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds an element by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.find_element_by_css_selector('#foo')
 |  
 |  find_element_by_id(self, id_) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds an element by id.
 |      
 |      :Args:
 |       - id\_ - The id of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.find_element_by_id('foo')
 |  
 |  find_element_by_link_text(self, link_text) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds an element by link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to be found.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.find_element_by_link_text('Sign In')
 |  
 |  find_element_by_name(self, name) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds an element by name.
 |      
 |      :Args:
 |       - name: The name of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.find_element_by_name('foo')
 |  
 |  find_element_by_partial_link_text(self, link_text) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds an element by a partial match of its link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partially match on.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.find_element_by_partial_link_text('Sign')
 |  
 |  find_element_by_tag_name(self, name) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds an element by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.find_element_by_tag_name('h1')
 |  
 |  find_element_by_xpath(self, xpath) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds an element by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the element to find.
 |      
 |      :Returns:
 |       - WebElement - the element if it was found
 |      
 |      :Raises:
 |       - NoSuchElementException - if the element wasn't found
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.find_element_by_xpath('//div/td[1]')
 |  
 |  find_elements(self, by='id', value=None) -> List[selenium.webdriver.remote.webelement.WebElement]
 |      Find elements given a By strategy and locator.
 |      
 |      :Usage:
 |          ::
 |      
 |              elements = driver.find_elements(By.CLASS_NAME, 'foo')
 |      
 |      :rtype: list of WebElement
 |  
 |  find_elements_by_class_name(self, name) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds elements by class name.
 |      
 |      :Args:
 |       - name: The class name of the elements to find.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          ::
 |      
 |              elements = driver.find_elements_by_class_name('foo')
 |  
 |  find_elements_by_css_selector(self, css_selector) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds elements by css selector.
 |      
 |      :Args:
 |       - css_selector - CSS selector string, ex: 'a.nav#home'
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          ::
 |      
 |              elements = driver.find_elements_by_css_selector('.foo')
 |  
 |  find_elements_by_id(self, id_) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds multiple elements by id.
 |      
 |      :Args:
 |       - id\_ - The id of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          ::
 |      
 |              elements = driver.find_elements_by_id('foo')
 |  
 |  find_elements_by_link_text(self, text) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds elements by link text.
 |      
 |      :Args:
 |       - link_text: The text of the elements to be found.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          ::
 |      
 |              elements = driver.find_elements_by_link_text('Sign In')
 |  
 |  find_elements_by_name(self, name) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds elements by name.
 |      
 |      :Args:
 |       - name: The name of the elements to find.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          ::
 |      
 |              elements = driver.find_elements_by_name('foo')
 |  
 |  find_elements_by_partial_link_text(self, link_text) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds elements by a partial match of their link text.
 |      
 |      :Args:
 |       - link_text: The text of the element to partial match on.
 |      
 |      :Returns:
 |       - list of webelement - a list with elements if any was found.  an
 |         empty list if not
 |      
 |      :Usage:
 |          ::
 |      
 |              elements = driver.find_elements_by_partial_link_text('Sign')
 |  
 |  find_elements_by_tag_name(self, name) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds elements by tag name.
 |      
 |      :Args:
 |       - name - name of html tag (eg: h1, a, span)
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          ::
 |      
 |              elements = driver.find_elements_by_tag_name('h1')
 |  
 |  find_elements_by_xpath(self, xpath) -> selenium.webdriver.remote.webelement.WebElement
 |      Finds multiple elements by xpath.
 |      
 |      :Args:
 |       - xpath - The xpath locator of the elements to be found.
 |      
 |      :Returns:
 |       - list of WebElement - a list with elements if any was found.  An
 |         empty list if not
 |      
 |      :Usage:
 |          ::
 |      
 |              elements = driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
 |  
 |  forward(self) -> None
 |      Goes one step forward in the browser history.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.forward()
 |  
 |  fullscreen_window(self) -> None
 |      Invokes the window manager-specific 'full screen' operation
 |  
 |  get(self, url: str) -> None
 |      Loads a web page in the current browser session.
 |  
 |  get_cookie(self, name) -> dict
 |      Get a single cookie by name. Returns the cookie if found, None if not.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_cookie('my_cookie')
 |  
 |  get_cookies(self) -> List[dict]
 |      Returns a set of dictionaries, corresponding to cookies visible in the current session.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_cookies()
 |  
 |  get_log(self, log_type)
 |      Gets the log for a given log type
 |      
 |      :Args:
 |       - log_type: type of log that which will be returned
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_log('browser')
 |              driver.get_log('driver')
 |              driver.get_log('client')
 |              driver.get_log('server')
 |  
 |  get_pinned_scripts(self) -> List[str]
 |  
 |  get_screenshot_as_base64(self) -> str
 |      Gets the screenshot of the current window as a base64 encoded string
 |         which is useful in embedded images in HTML.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_screenshot_as_base64()
 |  
 |  get_screenshot_as_file(self, filename) -> bool
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_screenshot_as_file('/Screenshots/foo.png')
 |  
 |  get_screenshot_as_png(self) -> bytes
 |      Gets the screenshot of the current window as a binary data.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_screenshot_as_png()
 |  
 |  get_window_position(self, windowHandle='current') -> dict
 |      Gets the x,y position of the current window.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_window_position()
 |  
 |  get_window_rect(self) -> dict
 |      Gets the x, y coordinates of the window as well as height and width of
 |      the current window.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_window_rect()
 |  
 |  get_window_size(self, windowHandle='current') -> dict
 |      Gets the width and height of the current window.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.get_window_size()
 |  
 |  implicitly_wait(self, time_to_wait) -> None
 |      Sets a sticky timeout to implicitly wait for an element to be found,
 |         or a command to complete. This method only needs to be called one
 |         time per session. To set the timeout for calls to
 |         execute_async_script, see set_script_timeout.
 |      
 |      :Args:
 |       - time_to_wait: Amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.implicitly_wait(30)
 |  
 |  maximize_window(self) -> None
 |      Maximizes the current window that webdriver is using
 |  
 |  minimize_window(self) -> None
 |      Invokes the window manager-specific 'minimize' operation
 |  
 |  pin_script(self, script, script_key=None) -> selenium.webdriver.remote.script_key.ScriptKey
 |  
 |  print_page(self, print_options: Optional[selenium.webdriver.common.print_page_options.PrintOptions] = None) -> str
 |      Takes PDF of the current page.
 |      The driver makes a best effort to return a PDF based on the provided parameters.
 |  
 |  refresh(self) -> None
 |      Refreshes the current page.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.refresh()
 |  
 |  save_screenshot(self, filename) -> bool
 |      Saves a screenshot of the current window to a PNG image file. Returns
 |         False if there is any IOError, else returns True. Use full paths in
 |         your filename.
 |      
 |      :Args:
 |       - filename: The full path you wish to save your screenshot to. This
 |         should end with a `.png` extension.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.save_screenshot('/Screenshots/foo.png')
 |  
 |  set_page_load_timeout(self, time_to_wait) -> None
 |      Set the amount of time to wait for a page load to complete
 |         before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.set_page_load_timeout(30)
 |  
 |  set_script_timeout(self, time_to_wait) -> None
 |      Set the amount of time that the script should wait during an
 |         execute_async_script call before throwing an error.
 |      
 |      :Args:
 |       - time_to_wait: The amount of time to wait (in seconds)
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.set_script_timeout(30)
 |  
 |  set_window_position(self, x, y, windowHandle='current') -> dict
 |      Sets the x,y position of the current window. (window.moveTo)
 |      
 |      :Args:
 |       - x: the x-coordinate in pixels to set the window position
 |       - y: the y-coordinate in pixels to set the window position
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.set_window_position(0,0)
 |  
 |  set_window_rect(self, x=None, y=None, width=None, height=None) -> dict
 |      Sets the x, y coordinates of the window as well as height and width of
 |      the current window. This method is only supported for W3C compatible
 |      browsers; other browsers should use `set_window_position` and
 |      `set_window_size`.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.set_window_rect(x=10, y=10)
 |              driver.set_window_rect(width=100, height=200)
 |              driver.set_window_rect(x=10, y=10, width=100, height=200)
 |  
 |  set_window_size(self, width, height, windowHandle='current') -> dict
 |      Sets the width and height of the current window. (window.resizeTo)
 |      
 |      :Args:
 |       - width: the width in pixels to set the window to
 |       - height: the height in pixels to set the window to
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.set_window_size(800,600)
 |  
 |  start_client(self)
 |      Called before starting a new session. This method may be overridden
 |      to define custom startup behavior.
 |  
 |  start_session(self, capabilities: dict, browser_profile=None) -> None
 |      Creates a new session with the desired capabilities.
 |      
 |      :Args:
 |       - capabilities - a capabilities dict to start the session with.
 |       - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.
 |  
 |  stop_client(self)
 |      Called after executing a quit command. This method may be overridden
 |      to define custom shutdown behavior.
 |  
 |  unpin(self, script_key) -> None
 |  
 |  ----------------------------------------------------------------------
 |  Readonly properties inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  application_cache
 |      Returns a ApplicationCache Object to interact with the browser app cache
 |  
 |  capabilities
 |      returns the drivers current capabilities being used.
 |  
 |  current_url
 |      Gets the URL of the current page.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.current_url
 |  
 |  current_window_handle
 |      Returns the handle of the current window.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.current_window_handle
 |  
 |  desired_capabilities
 |      returns the drivers current desired capabilities being used
 |  
 |  log_types
 |      Gets a list of the available log types. This only works with w3c compliant browsers.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.log_types
 |  
 |  mobile
 |  
 |  name
 |      Returns the name of the underlying browser for this instance.
 |      
 |      :Usage:
 |          ::
 |      
 |              name = driver.name
 |  
 |  page_source
 |      Gets the source of the current page.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.page_source
 |  
 |  switch_to
 |      :Returns:
 |          - SwitchTo: an object containing all options to switch focus into
 |      
 |      :Usage:
 |          ::
 |      
 |              element = driver.switch_to.active_element
 |              alert = driver.switch_to.alert
 |              driver.switch_to.default_content()
 |              driver.switch_to.frame('frame_name')
 |              driver.switch_to.frame(1)
 |              driver.switch_to.frame(driver.find_elements_by_tag_name("iframe")[0])
 |              driver.switch_to.parent_frame()
 |              driver.switch_to.window('main')
 |  
 |  title
 |      Returns the title of the current page.
 |      
 |      :Usage:
 |          ::
 |      
 |              title = driver.title
 |  
 |  window_handles
 |      Returns the handles of all windows within the current session.
 |      
 |      :Usage:
 |          ::
 |      
 |              driver.window_handles
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from selenium.webdriver.remote.webdriver.WebDriver:
 |  
 |  file_detector
 |  
 |  orientation
 |      Gets the current orientation of the device
 |      
 |      :Usage:
 |          ::
 |      
 |              orientation = driver.orientation
 |  
 |  timeouts
 |      Get all the timeouts that have been set on the current session
 |      
 |      :Usage:
 |          ::
 |              driver.timeouts
 |      :rtype: Timeout

None
